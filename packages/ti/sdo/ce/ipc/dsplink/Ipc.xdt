%%{
/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
%%}
%%{
    /*
     *  ======== Settings.xdt ========
     *  Generate the config structure for ce.ipc module
     */
    var settings = this;
%%}

/* Max timeout for MSGQ_get() allowed. */
UInt32 ti_sdo_ce_ipc_dsplink_Ipc_maxTimeout = `settings.maxTimeout`UL;

/* configuration for interprocessor communication */

/* size of the communication message */
UInt32 Comm_MSGSIZE = `settings.armCommMsgSize`;

/* number of Comm_MSGSIZE-sized messages in the system */
UInt32 Comm_NUMMSGS = `settings.armCommNumMsgs`;

/* configure number of retries Comm_locate should do before giving up */
UInt32 Comm_LOCATERETRIES = `settings.commLocateRetries`;


/* Arm-side DSPLINK configuration
 * ==============================
 */

#include <ti/sdo/ce/osal/Global.h>

/* Arm-side DspLink configuration tables { */
%%{
    for (var iserver = 0; iserver < settings.linkConfigs.length; iserver++ ) {
        var linkConfig = settings.linkConfigs[ iserver ];

	var bootMode;
	if (linkConfig.linkCfg.doPowerControl) {
	    if (linkConfig.linkCfg.dspManagement == settings.BootAndLoadDsp) {
		bootMode = "BootPwr";
	    }
	    else if (linkConfig.linkCfg.dspManagement == settings.BootDspAutonomously) {
		bootMode = "NoLoadPwr";
	    }
	    else if (linkConfig.linkCfg.dspManagement == settings.None) {
		/* NoBoot w/ doPowerControl invalid */
		throw "Error: invalid combination of armDspLinkConfig.doPowerControl and armDspLinkConfig.dspManagement: doPowerControl=" + linkConfig.linkCfg.doPowerControl + ", dspManagement=" + linkConfig.linkCfg.dspManagement;
	    }
	    else {
		throw "Error: armDspLinkConfig.dspManagement undefined";
	    }
	}
	else if (!linkConfig.linkCfg.doPowerControl) {
	    if (linkConfig.linkCfg.dspManagement == settings.BootAndLoadDsp) {
		bootMode = "BootNoPwr";
	    }
	    else if (linkConfig.linkCfg.dspManagement == settings.BootDspAutonomously) {
		bootMode = "NoLoadNoPwr";
	    }
	    else if (linkConfig.linkCfg.dspManagement == settings.None) {
		bootMode = "NoBoot";
	    }
	    else {
		throw "Error: armDspLinkConfig.dspManagement is invalid";
	    }
	}
	else {
	    throw "Error: armDspLinkConfig.doPowerControl is invalid";
	}
    }
%%}

%     /* 'use LAD' control flag */
Int Global_useLinkArbiter = `settings.useLinkArbiter == true ? "TRUE" : "FALSE"`;

%     if (!settings.useLinkArbiter) {
%        // define empty LAD functions when LAD is not used
Int LAD_connect(String clientName, Int * id) { return 0; }
Int LAD_disconnect(Int id) { return 0; }
Int LAD_getDspStatus(Int cpuId, Int * statusInfo) { return 0; }
Int LAD_releaseDsp(Int id) { return 0; }
Int LAD_startupDsp(Int id, Int cpuId, Int linkId, String image) { return 0; }
%    } // otherwise they'll be linked from the ladclient library
%%{
/*
 * @(#) ti.sdo.ce.ipc.dsplink; 2, 0, 1,1; 2-24-2012 19:30:03; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

%%}
