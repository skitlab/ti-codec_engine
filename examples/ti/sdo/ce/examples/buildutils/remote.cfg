/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/*
 *  ======== remote.cfg ========
 */

/* set "serverName" to point at the platform-specific server executable */
var platform = Program.platformName;
var platBinName = platform.replace(/\:/g, "_").replace(/\./g, "_");

var serverSuffix = "";
var serverIds = Program.build.cfgArgs.serverIds;
if (serverIds == null || serverIds.length == 0) {
    serverIds = [""];
}

var Engine = xdc.useModule('ti.sdo.ce.Engine');
var myEngine = new Array();

for (var i = 0; i < serverIds.length; i++) {

    //print("platform:  " + platform + "\n");
    // The following line matches both evmOMAPL137 and evmOMAPL138
    // ... but there's got to be a better way...  :(
    //TODO: clean up these hard-coded assumptions

    if (platform.match("evmOMAPL13")) {
        serverSuffix = "674";
    }
    else if (platform.match("ti.platforms.evmTI814X") ||
             platform.match("ti.platforms.evmDM8148") ||
             platform.match("ti.platforms.evmTI813X") ||
             platform.match("ti.platforms.evmTI816X") ||
             platform.match("ti.platforms.evmDM8168")) {
        if (serverIds[i] == "DSP") {
            /* assume ELF */
            serverSuffix = "e674";
        }
        else {
            /* assume ELF */
            serverSuffix = "em3";
        }
    }
    else {
        serverSuffix = "64P";
    }

    var serverName = "";
    if (serverIds[i] != null && serverIds[i] != "") {
        var serverBaseName = "/all_" + serverIds[i];
        var engineName = "remote_copy_" + serverIds[i];
    }
    else {
        var serverBaseName = "/all";
        var engineName = "remote_copy";
    }
    serverName = "bin/" + platBinName + serverBaseName + ".x" + serverSuffix;

    try {
        /*
         *  ======== Engine Configuration ========
         */
        //print("creating engine named '" + engineName + "'");
        myEngine.push(Engine.createFromServer(
            engineName,  // Engine name (as referred to in the C app)
            serverName,  // path to server exe, relative to its package dir
            "ti.sdo.ce.examples.servers.all_codecs" // server package
            ));
    }
    catch (e) {
        if (serverIds[i].match(/M3$/)) {
            // No M3 Server found - that's ok
            //print("Skipping Engine for M3 server " + serverIds[i]);
        }
        else {
            // No DSP Server found - not ok
            throw(e);
        }
    }
}

/* use and configure the osal. */
var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');

if (Program.build.target.os == "WindowsCE") {
    throw ("WinCE not yet supported");
//    osalGlobal.runtimeEnv = osalGlobal.DSPLINK_WINCE;
}
else if (Program.build.target.os == "Linux") {
    osalGlobal.runtimeEnv = osalGlobal.DSPLINK_LINUX;
    xdc.useModule('ti.sdo.xdcruntime.linux.Settings');
    xdc.useModule('ti.sdo.ce.osal.linux.Settings');

    var common = xdc.loadCapsule('ti/sdo/ce/examples/buildutils/common_sys.cfg');
    var Processor = xdc.useModule('ti.sdo.ce.ipc.dsplink.Processor');

    /* first set module defaults ... */
    Processor.heapId = common.MessageQ_heapMap["Ipc"];
    Processor.sharedRegionId = common.SharedRegion_map["Ipc"];

    /* ... then add per-processor settings */
    var coreComm = {};
    coreComm.numMsgs = 64;
    coreComm.msgSize = 4 * 1024;
    coreComm.heapId = common.MessageQ_heapMap["Ipc"];
    coreComm.userCreatedHeap = false;
    coreComm.sharedRegionId = common.SharedRegion_map["Ipc"];
    if (platform.match("TI814X") || platform.match("TI816X") ||
            platform.match("DM8148") || platform.match("DM8168")) {
        Processor.coreComm.$add(coreComm);
        Processor.coreComm.$add(coreComm);
        Processor.coreComm.$add(coreComm);
        Processor.coreComm.$add(coreComm);
    }
    else if (platform.match("TI813X"))
    {
        Processor.coreComm.$add(coreComm);
        Processor.coreComm.$add(coreComm);
        Processor.coreComm.$add(coreComm);
    }
    else {
        Processor.coreComm.$add(coreComm);
        Processor.coreComm.$add(coreComm);
    }

    // Use the Linux ipc
    var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
    var dsplinkIpc = xdc.useModule('ti.sdo.ce.ipc.dsplink.Ipc');
    ipcSettings.ipc = dsplinkIpc;
}

// Set up logging
xdc.loadCapsule('ti/sdo/ce/examples/buildutils/common_log.cfg');
/*
 *  @(#) ti.sdo.ce.examples.buildutils; 1, 0, 0,1; 2-24-2012 19:28:37; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

