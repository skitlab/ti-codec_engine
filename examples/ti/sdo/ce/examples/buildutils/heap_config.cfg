/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== bios6.cfg ========
 *  Common configuration for setting up BIOS 6 configuration.
 */

var Platform = Program.platformName;
var DeviceName = Program.cpu.deviceName;
var CpuCore = Program.cpu.attrs.cpuCore;

function getInternalHeapName() {

    if ((Platform.match(/DM8168/)) || (Platform.match(/TI814X/)) ||
            (Platform.match(/DM8148/)) || (Platform.match(/TI813X/)) ||
            (Platform.match(/TI816X/))) {

        if (CpuCore == "CM3") {
            /*
             * We don't want to use internal memory for Ducati-based chips
             * since the platform's internal memory base address is virtual,
             * which means that we would also need to setup the AMMU to be
             * able to address it.
             */
            return("DDR3_M3");
        } else if (CpuCore == "674") {
            return("IRAM");
        }
    }
    else if (Platform.match(/evm6472/)) {
        return("LL2RAM");
    }
    else if (Platform.match(/evm6474/)) {
        return("L2RAM");
    }
    else if (Platform.match(/DA830|3430|3530/)) {
        return("IRAM");
    }
    else if ((Platform.match(/simTesla/)) || (Platform.match(/sdp4430/))) {
        if (CpuCore == "64T") {
            return("L2SRAM");
        } else if (CpuCore == "CM3") {
            /* M3 */
            return("L2_RAM");
        }
    }
    else if (Platform.match(/6467/)) {
        return("IRAM");
    }
    else if (Platform.match(/6616|6608|6670|6678/)) {
        return("L2SRAM");
    }
    else {
        /* everything else */
        return("IRAM");
    }
}

function getExternalHeapName() {
    if ((Platform.match(/simTesla/)) || (Platform.match(/sdp4430/))) {
        return("EXT_RAM");
    }
    else if (Platform.match(/sdp2430/)) {
        return("DDR");
    }
    else if (Platform.match(/DA830|sdp3430/)) {
        return("SDRAM");
    }
    else if (Platform.match(/TI814X/) || Platform.match(/TI816X/) ||
             Platform.match(/DM8148/) || Platform.match(/TI813X/) ||
            Platform.match(/DM8168/)) {
        if (CpuCore == "CM3") {
            return("DDR3_M3");
        } else if (CpuCore == "674") {
            return("DDR3_DSP");
        }
    }
    else if (Platform.match(/6616|6608|6670|6678/)) {
        return("DDR3");
    }
    else {
        /* everything else */
        return("DDR2");
    }
}

function createHeapMem(size, sectionName, heapName) {
    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
    var heapMemParams = new HeapMem.Params();
    heapMemParams.size = size;
    heapMemParams.sectionName = sectionName;
    Program.sectMap[sectionName] = heapName;
    return HeapMem.create(heapMemParams);
}

/*
 *  @(#) ti.sdo.ce.examples.buildutils; 1, 0, 0,1; 2-24-2012 19:28:37; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

