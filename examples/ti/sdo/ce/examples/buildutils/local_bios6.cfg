/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== bios6.cfg ========
 */

var platform = Program.platformName;
var deviceName = Program.cpu.deviceName;
var cpuCore = Program.cpu.attrs.cpuCore;
//print("cpuCore is " + cpuCore);

var intHeapName = "L1DSRAM";
var intHeapSize = 0xc000;     //  48 kB
var extHeapName = "DDR2";
var extHeapSize = 0x20000;  // 128 kB

/* override defaults with platform-specific segments, if needed */
if ((platform.match(/Ducati/)) || (platform.match(/DM740/))) {
    intHeapName = "EXT_RAM";
    extHeapName = "EXT_RAM";
}
else if ((platform.match(/DM8168/)) || (platform.match(/DM8148/))) {
    if (cpuCore == "CM3") {
        intHeapName = "DDR3_RAM";
    } else if (cpuCore == "674") {
        intHeapName = "IRAM";
    } else if (cpuCore == "v7A") {
        intHeapName = "SRAM";
    }
    extHeapName = "DDR3_RAM";
}
else if (platform.match(/TI816X/) || platform.match(/TI814X/) ||
        platform.match(/TI813X/)) {
    if (cpuCore == "CM3") {
        intHeapName = "DDR3_M3";
        extHeapName = "DDR3_M3";
    } else if (cpuCore == "674") {
        intHeapName = "IRAM";
        extHeapName = "DDR3_DSP";
    } else if (cpuCore == "v7A") {
        intHeapName = "SRAM";
        extHeapName = "DDR3_HOST";
    }
}
else if (platform.match(/evmTCI6488/)) {
    intHeapName = "DDR2";
    extHeapName = "L2RAM";
}
else if (platform.match(/evm6472/)) {
    intHeapName = "LL2RAM";
}
else if (platform.match(/6616|6608|6670|6678/)) {
    intHeapName = "L2SRAM";
    extHeapName = "DDR3";
}
else if (platform.match(/evm6474/)) {
    intHeapName = "L2RAM";
}
else if (platform.match(/DA830/)) {
    intHeapSize = 0x6000;    //  24 kB
    extHeapName = "SDRAM";
}
else if ((platform.match(/simTesla/)) || (platform.match(/sdp4430/))) {
    if (cpuCore == "64T") {
        intHeapName = "L2SRAM";
    } else if (cpuCore == "CM3") {
        /* M3 */
        intHeapName = "L2_RAM";
    }
    extHeapName = "EXT_RAM";
} else if (platform.match(/6467/)) {
    intHeapName = "IRAM";
    intHeapSize = 0x4000;     // 256 B
}

/* Configure internal and external heaps */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var tempMemParams = new HeapMem.Params();

tempMemParams.size = extHeapSize;
tempMemParams.sectionName = ".DDR2_HEAP";

/* Create heaps as global variables so they can be used in C code. */
Program.global.DDR2_HEAP = HeapMem.create(tempMemParams);

tempMemParams.size = intHeapSize;
tempMemParams.sectionName = ".L1D_HEAP";

Program.global.L1D_HEAP = HeapMem.create(tempMemParams);

// Place heaps.
Program.sectMap[".L1D_HEAP"]  = intHeapName;
Program.sectMap[".DDR2_HEAP"] = extHeapName;
Program.sectMap[".text"]      = extHeapName;

// Set the default heap to DDR2
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = Program.global.DDR2_HEAP;
/*
 *  @(#) ti.sdo.ce.examples.buildutils; 1, 0, 0,1; 2-24-2012 19:28:37; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

