/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== common_log.cfg ========
 */

// Set up logging
var Diags = xdc.useModule('xdc.runtime.Diags');

var myLogger;

/* printf-based 'System' Logging */
var sysLogging = true;

/* if sysLogging is false, and on BIOS, rtaSupport can be set to true */
var rtaSupport = false;

if (sysLogging) {
    // Set up the System support proxy with C Standard Library implementation
    var System = xdc.useModule('xdc.runtime.System');
    System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');

    // Choose the logger that prints thread ID
    var LoggerSys = xdc.useModule('ti.sdo.utils.loggers.LoggerSysTID');
    //var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');

    var LoggerSysParams = new LoggerSys.Params();

    // Bring in and configure up the timestamp
    var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

    if (Program.build.target.os == "Linux") {
        // gettimeofday()-based
        Timestamp.SupportProxy =
                xdc.useModule('ti.sdo.xdcruntime.linux.TimestampPosix');
    }

    myLogger = LoggerSys.create(LoggerSysParams);
}
else {
    /* LoggerBuf */
    var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
    var LoggerBufParams = new LoggerBuf.Params();

    myLogger = LoggerBuf.create(LoggerBufParams);

    /* Note, stop mode RTA is only supported on BIOS with LoggerBuf */
    if (Program.build.target.os == undefined) {

        if (rtaSupport) {
            /* Bring in and configure the RTA Agent */
            var Agent = xdc.useModule('ti.sysbios.rta.Agent');

//        Agent.transport = Agent.Transport_RTDX;
            Agent.transport = Agent.Transport_STOP_MODE_ONLY;
        }
    }
}

var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = myLogger;

// Set Main diags to RUNTIME_ON.
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta('xdc.runtime.Main', Diags.ALL, Diags.RUNTIME_ON);

// Enable logging for Registry-registered modules (which includes the
// CE and FC modules, among others)
xdc.useModule('xdc.runtime.Registry');

// Configure Registry-based module logging to be initialized off, but
// runtime changable
Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF);
/*
 *  @(#) ti.sdo.ce.examples.buildutils; 1, 0, 0,1; 2-24-2012 19:28:37; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

