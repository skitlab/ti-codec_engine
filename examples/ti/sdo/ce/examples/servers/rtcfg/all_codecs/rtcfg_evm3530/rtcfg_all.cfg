/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== rtcfg_all.cfg ========
 */


/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* Set xdcruntime proxies for BIOS OS */
xdc.useModule('ti.sysbios.xdcruntime.Settings');

/*
 *  ======== Create heaps ========
 */
var sramName = "DDR2";       // Name of internal memory in Platform.xdc file
var intHeapSize = 0x12000;   // Size to make internal heap
var extHeapSize = 0x50000;   // Size to make external heap

var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();

heapMemParams.size = intHeapSize;
heapMemParams.sectionName = ".INT_HEAP";

/* Create heaps as global variables so they can be used in C code. */
Program.global.INT_HEAP = HeapMem.create(heapMemParams);

heapMemParams.size = extHeapSize;
heapMemParams.sectionName = ".EXT_HEAP";

Program.global.EXT_HEAP = HeapMem.create(heapMemParams);

heapMemParams.size = Program.platform.externalMemoryMap["DDRALGHEAP"].len;
heapMemParams.sectionName = ".EXTALG_HEAP";
Program.global.EXTALG_HEAP = HeapMem.create(heapMemParams);

/* Place code */
Program.sectMap[".text"] = Program.platform.dataMemory;

/* Place heaps. */
Program.sectMap[".INT_HEAP"] = sramName;
Program.sectMap[".EXT_HEAP"] = Program.platform.dataMemory;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = Program.global.EXT_HEAP;
Memory.defaultHeapSize = 0x4000;

/* ======== IPC setup ======== */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');

var settings = xdc.useModule('ti.sdo.ipc.family.Settings');
var procNames = settings.getDeviceProcNames();
MultiProc.setConfig("DSP", procNames);

xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');

xdc.useModule('ti.syslink.ipc.rtos.Syslink');

xdc.loadCapsule("ti_platforms_evm3530.cfg");


/* ======== Logging setup ======== */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');

// Set Main diags to RUNTIME_ON.
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta('xdc.runtime.Main', Diags.ALL, Diags.RUNTIME_ON);

// Enable logging for metaonly modules
var Registry = xdc.useModule('xdc.runtime.Registry');
Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF);

//  Set System_printf() to use SysCBuf, to enable CE_DEBUG trace from the
//  server. Logger needs to be set to LoggerSys or LoggerSysTID, that
//  outputs trace using System_printf() calls.
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = xdc.useModule('ti.sdo.ce.utils.syscbuf.SysCBuf');

// Choose the logger that prints thread ID
var LoggerSys = xdc.useModule('ti.sdo.utils.loggers.LoggerSysTID');
var LoggerSysParams = new LoggerSys.Params();

myLogger = LoggerSys.create(LoggerSysParams);

myLogger.instance.name = "myLogger";
Defaults.common$.logger = myLogger;

// Bring in and configure up the timestamp
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

/* ======== Modules needed by Codec Engine ======== */
xdc.useModule('xdc.runtime.knl.Thread');
xdc.useModule('xdc.runtime.knl.GateProcess');
xdc.useModule('xdc.runtime.knl.SemProcess');
xdc.useModule('xdc.runtime.knl.SemThread');
xdc.useModule('ti.sysbios.utils.Load');
/*
 *  @(#) ti.sdo.ce.examples.servers; 1, 0, 0,1; 2-24-2012 19:29:36; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

