/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');
var ipcSharedMem = Program.cpu.memoryMap["SL2RAM"];
var entry = new SharedRegion.Entry();

/*
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 *  NOTE: On c6472, region 0 needs to be placed in SL2 RAM because
 *  of the requirement that all GateMP created on this device use
 *  SL2 RAM shared memory.
 */


var entry = new SharedRegion.Entry();

entry.base = ipcSharedMem.base;
entry.len = ipcSharedMem.len;
entry.ownerProcId = 0;
entry.isValid = true;
entry.cacheLineSize = 64; /* SL2 memory has a cache line size of 64 */
entry.name = "SL2_RAM";

SharedRegion.setEntryMeta(
    0,  /* index */
    entry
);

/*
 *  @(#) ti.sdo.ce.examples.servers.audio1_ires; 1, 0, 0,1; 2-24-2012 19:29:45; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

