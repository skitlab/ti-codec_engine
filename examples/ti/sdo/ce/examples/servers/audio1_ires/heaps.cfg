/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== heaps.cfg ========
 */

var platformName = Program.platformName;
print("platformName = '" + platformName + "'");

var platform = Program.platform;

var heapConfig = xdc.loadCapsule('ti/sdo/ce/examples/buildutils/heap_config.cfg');

// consider platform-based files, checkout Rams & Gunjan approaches
// table-based?
var internalMemoryName = heapConfig.getInternalHeapName();
var internalHeapSize = 0xc000;     //  48 kB
var externalMemoryName = heapConfig.getExternalHeapName();
var externalHeapSize = 0x20000;    // 128 kB

/* Configure internal and external heaps */

Program.global.EXT_HEAP =
    heapConfig.createHeapMem(externalHeapSize, ".EXT_HEAP", externalMemoryName);
Program.global.INT_HEAP =
    heapConfig.createHeapMem(internalHeapSize, ".INT_HEAP", internalMemoryName);

if (!platformName.match(/evm6472|evm6474|6608|6616|6670|6678/)) {
    /* This is a SysLink-based system, create a DDRALGHEAP section */
    var DDRALGMemoryName = "DDRALGHEAP";
    var DDRALGHeapSize = platform.externalMemoryMap[DDRALGMemoryName].len;
    Program.global.EXTALG_HEAP = heapConfig.createHeapMem(DDRALGHeapSize, ".EXTALG_HEAP", DDRALGMemoryName);
}

/* Place code */
Program.sectMap[".text"]      = externalMemoryName;

/* Set the default heap to the external heap */
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = Program.global.EXT_HEAP;

/*
 *  @(#) ti.sdo.ce.examples.servers.audio1_ires; 1, 0, 0,1; 2-24-2012 19:29:45; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

