/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== audio_copy.cfg ========
 *  This server is used with the server_api_example application, that
 *  illustrates the use of Server APIs for changing a heap at runtime.
 */


xdc.loadCapsule('./heaps.cfg');

/* Setup xdcruntime proxys */
xdc.useModule('ti.sysbios.xdcruntime.Settings');

var platformName = Program.platformName;
var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');

/* SysLink-based slave server */
osalGlobal.runtimeEnv = osalGlobal.DSPLINK_BIOS;

/* IPC-related config */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
var myName;

// put into platform capsule
if (platformName.match(/DM8168/) || platformName.match(/DM8148/) ||
    platformName.match(/TI816X/) || platformName.match(/TI814X/) ||
    platformName.match(/TI813X/)) {

    if (platformName.match(/:VIDEO-M3/)) {
        var Core = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
        Core.id = 0;
        myName = "VIDEO-M3";
    }
    else if (platformName.match(/:VPSS-M3/)) {
        var Core = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
        Core.id = 1;
        myName = "VPSS-M3";
    }
    else {
        myName = "DSP";
    }
} else {
    myName = "DSP";
}

var settings = xdc.useModule('ti.sdo.ipc.family.Settings');
var procNames = settings.getDeviceProcNames();
MultiProc.setConfig(myName, procNames);

var platformBaseName = platformName.replace(/(\w+)\:.*$/, "$1").replace(/\./g, "_");
try {
    xdc.loadCapsule(platformBaseName + ".cfg");
} catch(e) {
    throw "Error: cannot load example's platform capsule '" + platformBaseName + ".cfg' (either it doesn't exist or there's an error inside it)";
}


/* to link in release libs, remove the following lines */
xdc.useModule('ti.sdo.ce.global.Settings').profile = "debug";
xdc.useModule('ti.sdo.fc.global.Settings').profile = "debug";

/*
 *  "Use" the various codec modules; i.e., implementation of codecs.
 *  All these "xdc.useModule" commands provide a handle to the codecs,
 *  which we'll use below to add them to the Server.algs array.
 */
var AUDDEC_COPY =
    xdc.useModule('ti.sdo.ce.examples.codecs.auddec_copy.AUDDEC_COPY');
var AUDENC_COPY =
    xdc.useModule('ti.sdo.ce.examples.codecs.audenc_copy.AUDENC_COPY');

/*
 *  ======== Server Configuration ========
 */
var Server = xdc.useModule('ti.sdo.ce.Server');

/* The server's stackSize.  More than we need... but safe. */
Server.threadAttrs.stackSize = 4096;

/* The servers execution priority */
Server.threadAttrs.priority = Server.MINPRI;

/*
 * The optional stack pad to add to non-configured stacks.  This is well
 * beyond most codec needs, but follows the approach of "start big and
 * safe, then optimize when things are working."
 */
Server.stackSizePad = 9000;

/*
 * The array of algorithms this server can serve up.  This array also
 * configures details about the threads which will be created to run the
 * algorithms (e.g. stack sizes, priorities, etc.).
 *
 * Note that we don't set any per-codec instance stack sizes below, as
 * we leverage the Server.stackSizePad config param to pad all stacks in
 * this simple example.
 *
 * However, in a 'real' server, stack sizes should be measured and
 * tested - there are some techniques for doing so here:
 * http://wiki.davincidsp.com/index.php?title=Stack_issues
 */
Server.algs = [
    {name: "auddec_copy", mod: AUDDEC_COPY, threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 1}
    },
    {name: "audenc_copy", mod: AUDENC_COPY, threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 1}
    },
];


/* Note that we presume this server runs on a BIOS-based system with DSKT2 */

/*
 *  ======== DSKT2 (XDAIS Alg. memory allocation) configuration ========
 *  Set up DSKT2 memory heaps to all be in EXTALG_HEAP. That way we can
 *  test that alg creation will fail before calling Server_redefine heap,
 *  and succeed after calling Server_redefine() to enlarge the size of
 *  EXTALG_HEAP.
 */
var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
DSKT2.DARAM0 = "EXTALG_HEAP";
DSKT2.DARAM1 = "EXTALG_HEAP";
DSKT2.DARAM2 = "EXTALG_HEAP";
DSKT2.SARAM0 = "EXTALG_HEAP";
DSKT2.SARAM1 = "EXTALG_HEAP";
DSKT2.SARAM2 = "EXTALG_HEAP";
DSKT2.ESDATA = "EXTALG_HEAP";
DSKT2.EPROG = "EXTALG_HEAP";
DSKT2.IPROG = "EXTALG_HEAP";
DSKT2.DSKT2_HEAP = "EXT_HEAP";

DSKT2.ALLOW_EXTERNAL_SCRATCH = false;
//DSKT2.SARAM_SCRATCH_SIZES[0] = 32 * 1024;  // 32k scratch for groupId 0


/*
 *  ======== RMAN (IRES Resource manager) configuration ========
 */
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
RMAN.useDSKT2 = true;
RMAN.tableSize = 10;

// Set up logging
xdc.loadCapsule('ti/sdo/ce/examples/buildutils/server_log.cfg');
/*
 *  @(#) ti.sdo.ce.examples.servers.server_api_example; 1, 0, 0,1; 2-24-2012 19:29:46; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

