/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== local.cfg ========
 */

var platform = Program.platformName;

/* temporarily use CE's osal for Memory_cache functions. */
var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');

/* get various codec modules; i.e., implementation of codecs */
var decoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.viddec_copy.VIDDEC_COPY');
var encoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.videnc_copy.VIDENC_COPY');

if (Program.build.target.os == undefined) {
    /* Presume this is a BIOS OS */
    xdc.loadCapsule('ti/sdo/ce/examples/buildutils/local_bios6.cfg');

    osalGlobal.runtimeEnv = osalGlobal.DSPBIOS;

    /* Unfortunately, the user script must bring this module in... */
    xdc.useModule('ti.sysbios.xdcruntime.Settings');

    /* TODO:H this explicit list is tough to maintain */
    if ((!platform.match(/Ducati/)) && (!platform.match(/DM8168/)) &&
            (!platform.match(/TI814X/)) && (!platform.match(/TI816X/)) &&
            (!platform.match(/DM8148/)) && (!platform.match(/DM8168/)) &&
            (!platform.match(/TI813X/)) &&
            (!platform.match(/sdp4430/))) {

        /* Some codecs provide performance optimizations via DMA */
        encoder.useDMA = true;

        var DMAN3 = xdc.useModule('ti.sdo.fc.dman3.DMAN3');
        var ACPY3 = xdc.useModule('ti.sdo.fc.acpy3.ACPY3');

        DMAN3.heapInternal    = "L1D_HEAP";
        DMAN3.heapExternal    = "DDR2_HEAP";
        DMAN3.idma3Internal   = false;
        DMAN3.scratchAllocFxn = "DSKT2_allocScratch";
        DMAN3.scratchFreeFxn  = "DSKT2_freeScratch";
        DMAN3.nullPaRamIndex = 0;

        var lld = Program.build.cfgArgs.lld;

        /* Do this for DSP-BIOS only */
        if (Program.build.target.suffix.match(/64P/) ||
                Program.build.target.suffix.match(/674/)) {
            if (lld == true) {

                print("Setting DMAN3's useExternalRM mode to TRUE");
                DMAN3.useExternalRM = true;
                DMAN3.numQdmaChannels = 1;

                var EDMA3 = xdc.useModule("ti.sdo.fc.edma3.Settings");

                EDMA3.persistentAllocFxn = "DSKT2_allocPersistent";
                EDMA3.persistentFreeFxn = "DSKT2_freePersistent";

                EDMA3.maxTccs[0] = 32;
                EDMA3.maxPaRams[0] = 48;

            }
        }
    }

    var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
    DSKT2.DARAM0     = "L1D_HEAP";
    DSKT2.DARAM1     = "L1D_HEAP";
    DSKT2.DARAM2     = "L1D_HEAP";
    DSKT2.SARAM0     = "L1D_HEAP";
    DSKT2.SARAM1     = "L1D_HEAP";
    DSKT2.SARAM2     = "L1D_HEAP";
    DSKT2.ESDATA     = "DDR2_HEAP";
    DSKT2.IPROG      = "L1D_HEAP";
    DSKT2.EPROG      = "DDR2_HEAP";
    DSKT2.DSKT2_HEAP = "DDR2_HEAP"; /* for DSKT2 objects */
}
else if (Program.build.target.os == "Linux") {
    osalGlobal.runtimeEnv = osalGlobal.LINUX;

    /* Unfortunately, the user script must bring this module in... */
    xdc.useModule('ti.sdo.xdcruntime.linux.Settings');
}
else if (Program.build.target.os == "WindowsCE") {
    osalGlobal.runtimeEnv = osalGlobal.WINCE;

    /* Unfortunately, the user script must bring this module in... */
    xdc.useModule('ti.sdo.xdcruntime.wince.Settings');
}
else {
    /* Unsupported OS.  Throw an exception to alert the user. */
    throw ("Unsupported target OS");
}

/*
 *  ======== Engine Configuration ========
 */
var Engine = xdc.useModule('ti.sdo.ce.Engine');
var myEngine = Engine.create("video_copy", [
    {
        name : "videnc_copy",
        mod  : encoder,
        local: true
    },
    {
        name : "viddec_copy",
        mod  : decoder,
        local: true
    }
]);

// Set up logging
xdc.loadCapsule('ti/sdo/ce/examples/buildutils/common_log.cfg');

/*
 *  @(#) ti.sdo.ce.examples.apps.video_copy; 1, 0, 0,1; 2-24-2012 19:28:37; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

