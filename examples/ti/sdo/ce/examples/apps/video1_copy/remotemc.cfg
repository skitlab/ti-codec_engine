/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/*
 *  ======== remotemc.cfg ========
 */

/* simple assertion here that we only currently support BIOS-based multicore */
if (Program.build.target.os != undefined) {
    throw ("Unsupported target OS '" + Program.build.target.os + "'");
}

/* use an osal and configure it to BIOS. */
var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');
osalGlobal.runtimeEnv = osalGlobal.DSPBIOS;
xdc.useModule('ti.sysbios.xdcruntime.Settings');

/* Messages for each Server */
var ipcBios = xdc.useModule('ti.sdo.ce.ipc.bios.Ipc');
ipcBios.armCommMsgSize = 4 * 1024;
ipcBios.hostCommNumMsgs = 8;

/* bring in the algorithm modules our app uses. */
var universal = xdc.useModule(
    'ti.sdo.ce.examples.codecs.universal_copy.UNIVERSAL_COPY');

// for debug, uncomment the following line
//xdc.loadPackage('ti.xdais.dm.examples.universal_copy').profile = "debug";

/* For debug libraries, use the following 2 lines */
xdc.useModule('ti.sdo.ce.global.Settings').profile = "debug";
xdc.useModule('ti.sdo.fc.global.Settings').profile = "debug";

var platform = Program.platformName;
var deviceName = Program.cpu.deviceName;

var intHeapName = "";         // internal heap name set based on platform name
var intHeapSize = 0xc000;     //   48 kB
var extHeapName = "";         // external heap name set based on platform name
var extHeapSize = 0x18000;    //   96 kB

/* override defaults with platform-specific segments, if needed */
if (platform.match(/evm6472/)) {
    intHeapName = "LL2RAM";
    extHeapName = "DDR2";
} else if (platform.match(/evm6474/)) {
    intHeapName = "L2RAM";
    extHeapName = "DDR2";
}

/* Configure internal and external memory heaps */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var tempMemParams = new HeapMem.Params();

tempMemParams.size = extHeapSize;
tempMemParams.sectionName = ".DDR2_HEAP";

/* Create heaps as global variables so they can be used in C code. */
Program.global.DDR2_HEAP = HeapMem.create(tempMemParams);

tempMemParams.size = intHeapSize;
tempMemParams.sectionName = ".L1D_HEAP";
Program.global.L1D_HEAP = HeapMem.create(tempMemParams);

// Place heaps.
Program.sectMap[".L1D_HEAP"]  = intHeapName;
Program.sectMap[".DDR2_HEAP"] = extHeapName;
Program.sectMap[".text"]      = extHeapName;

// Set the default heap to DDR2
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = Program.global.DDR2_HEAP;

/* Configure IPC */
var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
var settings = xdc.useModule('ti.sdo.ipc.family.Settings');

var procNames = settings.getDeviceProcNames();

/* for now, assume core 0 is master, core 1+ are slaves */
MultiProc.setConfig("CORE0", procNames);

/* Multicore use case - all cores sync on each other at Ipc_setup() */
Ipc.procSync = Ipc.ProcSync_ALL;

/* Shared region configuration */
var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');
var ipcSharedMem;  /* holds segment info for SR0 */

var platformName = Program.platformName;

if (platformName.match(/evm6472/)) {
    ipcSharedMem = Program.cpu.memoryMap["SL2RAM"];
} else if (platformName.match(/evm6474/)) {
    ipcSharedMem = Program.cpu.memoryMap["DDR2_IPC"];
} else {
    throw ("Unsupported platform - don't know where to place SR0");
}

SharedRegion.setEntryMeta(0,
    new SharedRegion.Entry({
        name:           "IPC_shared_memory",
        base:           ipcSharedMem.base,
        len:            ipcSharedMem.len,
        ownerProcId:    0,
        isValid:        true,
        cacheEnable:    true,  /* TODO:H check this */
        cacheLineSize:  64     /* TODO:M check this */
    })
);

/*
 * Set MessageQ.numHeaps 'big enough' for now.  IPC's default will
 * change to 8 in IPC 1.22, and this explicit assignment can then be deleted.
 */
MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
MessageQ.numHeaps = 8;

/* Each slave processor gets their own heap. */
var coreComm = {};
coreComm.numMsgs = 8;               /* 8 msgs per slave */
coreComm.msgSize = 4 * 1024;        /* 4k per msg */
coreComm.sharedRegionId = 0;        /* use memory from SR0, created above */
coreComm.userCreatedHeap = false;   /* CE creates the heap in Engine_open() */

var Processor = xdc.useModule('ti.sdo.ce.ipc.bios.Processor');
for (var i = 0; i < MultiProc.numProcessors; i++) {
    coreComm.heapId = i;            /* register heap id == core id */
    Processor.coreComm.$add(coreComm);
}

/* FC Config - we have local algs, so need to configure DSKT2 */
var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
DSKT2.DARAM0     = "L1D_HEAP";
DSKT2.DARAM1     = "L1D_HEAP";
DSKT2.DARAM2     = "L1D_HEAP";
DSKT2.SARAM0     = "L1D_HEAP";
DSKT2.SARAM1     = "L1D_HEAP";
DSKT2.SARAM2     = "L1D_HEAP";
DSKT2.ESDATA     = "DDR2_HEAP";
DSKT2.IPROG      = "L1D_HEAP";
DSKT2.EPROG      = "DDR2_HEAP";
DSKT2.DSKT2_HEAP = "DDR2_HEAP";

/* No algorithms use resources, so no RMAN/DMAN3 config needed */

// Set up logging
xdc.loadCapsule('ti/sdo/ce/examples/buildutils/common_log.cfg');
/*
 *  @(#) ti.sdo.ce.examples.apps.video1_copy; 1, 0, 0,1; 2-24-2012 19:28:22; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

