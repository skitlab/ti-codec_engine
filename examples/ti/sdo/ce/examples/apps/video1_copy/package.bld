/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

/* when constructing a release, release everything */
Pkg.attrs.exportAll = true;

/* Uncomment this to build the app with debug support */
//Pkg.attrs.profile = "debug";

/* bin/ is a generated directory that 'xdc clean' should remove */
Pkg.generatedFiles.$add("bin/");

/*
 * When using this package with the CE examples build, xdcpaths.mak can be
 * used to determine which PROGRAMS to build for (e.g. APP_LOCAL or APP_CLIENT).
 *
 * If PROGRAMS is set via the XDCARGS, we respect that, and only build what's
 * requested.  Else, we build everything we can.
 */
var programs = undefined;
for (x = 0; x < arguments.length; x++) {
    if (arguments[x].match(/^PROGRAMS=/)) {
        programs = arguments[x].split("=")[1];
//        print("programs:  " + programs);
    }
}

for (var i = 0; i < Build.targets.length; i++) {
    var targ = Build.targets[i];

    print("building for target " + targ + " ...");

    /* Platforms were added to targ.platforms[] in config.bld */
    for (var j = 0; j < targ.platforms.length; j++) {
        var platform = targ.platforms[j];

        print("  platform:  " + platform);

        if ((programs == undefined) || (programs.match(/APP_LOCAL/))) {
            /* application with local codecs (using local.cfg) */
            print("    app with local codecs.");
            addExe(targ, platform, "local");
            if ((platform.match(/DM6446|DM6467|DM365|3530|PC/) &&
                    (targ.os == "Linux")) ||
                    targ.suffix.match("64")) {

                print("    app with local DMA-based codecs");
                addExe(targ, platform, "local_dma");
            }
        }

        /* Build an app with 'remote' algorithms for select devices. */
        if ((programs == undefined) || (programs.match(/APP_CLIENT/))) {

            var platInst = Build.usePlatform(platform);
            var platMod = platInst.$module;

            /*
             * If the platform is recognized, build an app with remote
             * codecs (using remote.cfg)
             */

            if ((targ.os != undefined) && ("GPP" in platMod) &&
                    (platMod.GPP.deviceName) &&
                    ((platMod.GPP.deviceName.match(/^TMS320TI816X$/)) ||
                     (platMod.GPP.deviceName.match(/^TMS320TI814X$/)) ||
                     (platMod.GPP.deviceName.match(/^TMS320DM8148$/)))) {

                /* TI816X has 3 slaves */
                print("    app with remote codecs.");
                addExe(targ, platform, "remote",
                        ["DSP", "VIDEO-M3", "VPSS-M3"], "remote");
                continue;
            }
            if ((targ.os != undefined) && ("GPP" in platMod) &&
                    (platMod.GPP.deviceName) &&
                    ((platMod.GPP.deviceName.match(/^TMS320TI813X$/)))) {

                /* TI813X has 2 slaves */
                print("    app with remote codecs.");
                addExe(targ, platform, "remote",
                        ["VIDEO-M3", "VPSS-M3"], "remote");
                continue;
            }
            if ((targ.os != undefined) && ("GPP" in platMod) &&
                    (platMod.GPP.deviceName) &&
                    (platMod.GPP.deviceName.match(/^OMAP3530$/))) {

                /* OMAP3530 has 1 DSP slave */
                print("    app with remote codecs.");
                addExe(targ, platform, "remote", ["DSP"], "remote");
                continue;
            }
            else if ((targ.os != undefined) &&
                    ("DSP" in platMod) && ("GPP" in platMod)) {
                /* 2-core GPP+DSP device with one slave */
                print("    app with remote codecs.");
                addExe(targ, platform, "ti/sdo/ce/examples/buildutils/remote",
                        [""], "remote");
            }
        }
    }
}

/*
 *  ======== addExe ========
 */
function addExe(targ, platform, cfg, serverIds, nameModifier)
{
    /* if on a C64, cache is enabled, and buffer alignment is 128 */
    var compileOpts = targ.suffix.match("64") ?
        "-DBUFALIGN=128 -DCACHE_ENABLED" : "";

    /*
     * Create the list of source files to build.
     * targ.os is undefined for BIOS.  BIOS apps require 'main_BIOS*.c' as
     * a BIOS task is spawned.  All other OS's use 'main_native.c'.
     */
    var srcs = ["app.c"];
    if (targ.os == undefined) {
        /* BIOS app */
        if (cfg == 'remotemc') {
           srcs.push("main_bios_remote.c");
        } else {
           srcs.push("main_bios_local.c");
        }
    }
    else {
        /* non-BIOS app */
        if (cfg == "remote") {
           srcs.push("main_hlos_remote.c");
        } else {
           srcs.push("main_hlos_local.c");
        }
    }

    // name = bin/platform/name.x+suffix
    var name = "bin/" +
            // replace all ':' and '.' with '_' in platform name
            platform.replace(/\:/g, "_").replace(/\./g, "_") + '/app';
    if (nameModifier != null) {
        name += "_" + nameModifier;
    }
    else {
        name += "_" + cfg;
    }

    if (serverIds != null) {
        var cfgArgs = "{serverIds: [";
        for (var i = 0; i < serverIds.length; i++) {
            cfgArgs += "\"" + serverIds[i] + "\",";
        }
        cfgArgs += "]}";
    }
    else {
        cfgArgs = "";
    }

    var defs = (cfg.match("local_dma")) ? "-D_USE_DMA_" : "";

    Pkg.addExecutable(name, targ, platform, {
        defs: defs,
        copts: compileOpts,
        cfgArgs: cfgArgs,
        cfgScript: cfg + ".cfg"
    }).addObjects(srcs);
}
/*
 *  @(#) ti.sdo.ce.examples.apps.video1_copy; 1, 0, 0,1; 2-24-2012 19:28:22; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

