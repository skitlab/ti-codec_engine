/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== local_dma.cfg ========
 */

var platform = Program.platformName;

/* use an osal.  osalGlobal is configured below, based on target. */
var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');

/* set to true to enable checked libraries */
xdc.useModule('ti.sdo.ce.Settings').checked = false;

/* get various codec modules; i.e., implementation of codecs */
var decoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.viddec1_copy.VIDDEC1_COPY');
var encoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.videnc1_copy.VIDENC1_COPY');

/* Enable VIDENC1_COPY codec's DMA support */
encoder.alg.useDMA = true;

var DMAN3 = xdc.useModule('ti.sdo.fc.dman3.DMAN3');
var ACPY3 = xdc.useModule('ti.sdo.fc.acpy3.ACPY3');

if (platform.match(/3530|PC/) && (Program.build.target.os != undefined)) {
    DMAN3.cpu = true;
    ACPY3.cpu = true;
}

if (Program.build.target.os == undefined) {
    /* Presume this is a BIOS OS */
    xdc.loadCapsule('ti/sdo/ce/examples/buildutils/local_bios6.cfg');

    osalGlobal.runtimeEnv = osalGlobal.DSPBIOS;

    /* Set up BIOS proxies */
    xdc.useModule('ti.sysbios.xdcruntime.Settings');

    var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
    DSKT2.DARAM0     = "L1D_HEAP";
    DSKT2.DARAM1     = "L1D_HEAP";
    DSKT2.DARAM2     = "L1D_HEAP";
    DSKT2.SARAM0     = "L1D_HEAP";
    DSKT2.SARAM1     = "L1D_HEAP";
    DSKT2.SARAM2     = "L1D_HEAP";
    DSKT2.ESDATA     = "DDR2_HEAP";
    DSKT2.IPROG      = "L1D_HEAP";
    DSKT2.EPROG      = "DDR2_HEAP";
    DSKT2.DSKT2_HEAP = "DDR2_HEAP"; /* for DSKT2 objects */

    /*  use external memory segment (DDR2) for DMAN3 internal segment to
     *  force algorithms to use external memory for what they think is
     *  internal memory -- we do this in a memory-constrained environment
     *  where all internal memory is used by cache and/or algorithm scratch
     *  mem.
     *
     *  By setting DMAN3.heapInternal = <external-heap>  DMAN3 *may not* supply
     *  ACPY3_PROTOCOL IDMA3 channels the protocol required internal memory for
     *  IDMA3 channel 'env' memory. To deal with this catch-22 situation we
     *  configure DMAN3 with hook-functions to obtain internal-scratch memory
     *  from the shared scratch pool for the associated algorithm's
     *  scratch-group (i.e. it first tries to get the internal scratch memory
     *  from DSKT2 shared allocation pool, hoping there is enough extra memory
     *  in the shared pool, if that doesn't work it will try persistent
     *  allocation from DMAN3.internalHeap).
     */
    DMAN3.heapInternal    = "L1D_HEAP";
    // DMAN3.heapInternal = "L1DHEAP"; /* L1DHEAP is an internal segment */
    DMAN3.heapExternal    = "DDR2_HEAP";
    DMAN3.idma3Internal   = false;
    DMAN3.scratchAllocFxn = "DSKT2_allocScratch";
    DMAN3.scratchFreeFxn  = "DSKT2_freeScratch";
}
else if (Program.build.target.os == "Linux") {
    osalGlobal.runtimeEnv = osalGlobal.LINUX;

    /* Set up for Linux */
    xdc.useModule('ti.sdo.xdcruntime.linux.Settings');

    //  The sum of the sizes of all heaps must be less than or equal to the
    //  value of Program.heap.
    Program.heap = 0x20000;

    /*
     *  Configure a heap. Create as global so it can be used in C code.
     *  ACPY3 needs its env allocated on a 32-byte boundary, so we can't
     *  use HeapStd. Instead, use HeapStdAlign.
     */
    var HeapStdAlign = xdc.useModule('xdcruntime.heaps.HeapStdAlign');
    var heapParams = new HeapStdAlign.Params();

    heapParams.size = 0x8000;

    var Memory = xdc.useModule('xdc.runtime.Memory');
    Memory.defaultHeapInstance = HeapStdAlign.create(heapParams);
}
else if (Program.build.target.os == "WindowsCE") {
    osalGlobal.runtimeEnv = osalGlobal.WINCE;

    /* Set up for WinCE */
    xdc.useModule('ti.sdo.xdcruntime.wince.Settings');
}
else {
    /* Unsupported OS.  Throw an exception to alert the user. */
    throw ("Unsupported target OS");
}

/* Bring in Codec Engine */
xdc.useModule('ti.sdo.ce.Engine');

// Set up logging
xdc.loadCapsule('ti/sdo/ce/examples/buildutils/common_log.cfg');

/*
 *  @(#) ti.sdo.ce.examples.apps.video1_copy; 1, 0, 0,1; 2-24-2012 19:28:21; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

