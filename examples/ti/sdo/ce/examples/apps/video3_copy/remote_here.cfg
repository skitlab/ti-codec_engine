/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== local.cfg ========
 */

var platform = Program.platformName;

/* use an osal.  osalGlobal is configured below, based on target. */
var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');

xdc.useModule('ti.sdo.ce.global.Settings').profile = 'debug';

/* This app uses xdc.runtime.Log and .Diag */
var Log = xdc.useModule("xdc.runtime.Log");
var Diags = xdc.useModule("xdc.runtime.Diags");
var Defaults = xdc.useModule('xdc.runtime.Defaults');

/* since we want to enable changing masks at runtime */
Diags.setMaskEnabled = true;

/* enable runtime control of Logging by default */
Defaults.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Defaults.common$.diags_EXIT = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER1 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER2 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER3 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER4 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER5 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER6 = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER7 = Diags.RUNTIME_OFF;

/* use the LoggerSys ILogger service provider */
var LoggerSys = xdc.useModule("xdc.runtime.LoggerSys");

/* ANSI C library based "System" */
xdc.useModule('xdc.runtime.System').SupportProxy =
        xdc.useModule('xdc.runtime.SysStd');

/* enable timestamps from LoggerSys */
xdc.useModule('xdc.runtime.Timestamp').SupportProxy =
        xdc.useModule('xdc.runtime.TimestampStd');

/* create and bind a default logger */
Defaults.common$.logger = LoggerSys.create();

/* get various codec modules; i.e., implementation of codecs */
var decoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.viddec3_copy.VIDDEC3_COPY');
var encoder =
    xdc.useModule('ti.sdo.ce.examples.codecs.videnc2_copy.VIDENC2_COPY');

if (Program.build.target.os == undefined) {

    /* Presume this is a BIOS OS */
    osalGlobal.runtimeEnv = osalGlobal.DSPBIOS;

    /* Unfortunately, the user script must bring this module in... */
    xdc.useModule('ti.sysbios.xdcruntime.Settings');

    var L1HeapName = "L1DSRAM";
    var L1HeapSize = 0xc000;
    var DDR2HeapName = "DDR2";
    var DDR2HeapSize = 0x20000;  // 128 KB

    if ((platform.match(/Ducati/)) || (platform.match(/DM740/))) {
        L1HeapName = "EXT_RAM";
        DDR2HeapName = "EXT_RAM";
    }
    else if (platform.match(/evmTCI6488/)) {
        L1HeapName = "DDR2";
        DDR2HeapName = "L2RAM";
    }
    else if (platform.match(/DA830/)) {
        L1HeapSize = 0x6000;
        DDR2HeapName = "SDRAM";
    }
    else if (platform.match(/simTesla/)) {
        L1HeapName = "L2SRAM";
        L1HeapSize = 0x800;
        DDR2HeapName = "EXT_RAM";
        DDR2HeapSize = 0x4000;
    }

    /* Configure L1D and DDR2 heaps */
    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
    var heapMemParams = new HeapMem.Params();

    heapMemParams.size = DDR2HeapSize;
    heapMemParams.sectionName = ".DDR2_HEAP";

    /* Create heaps as global variables so they can be used in C code. */
    Program.global.DDR2_HEAP = HeapMem.create(heapMemParams);

    heapMemParams.size = 0x100;
    heapMemParams.sectionName = ".MEM_HEAP";
    Program.global.MEM_HEAP = HeapMem.create(heapMemParams);

    heapMemParams.size = L1HeapSize;
    heapMemParams.sectionName = ".L1D_HEAP";

    Program.global.L1D_HEAP = HeapMem.create(heapMemParams);

    // Place heaps.
    Program.sectMap[".L1D_HEAP"] = L1HeapName;
    Program.sectMap[".DDR2_HEAP"] = DDR2HeapName;
    Program.sectMap[".MEM_HEAP"] = DDR2HeapName;
    Program.sectMap[".text"] = DDR2HeapName;

    // Set the default heap to DDR2
    var Memory = xdc.useModule('xdc.runtime.Memory');
    Memory.defaultHeapInstance = Program.global.DDR2_HEAP;

    var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
    DSKT2.DARAM0     = "L1D_HEAP";
    DSKT2.DARAM1     = "L1D_HEAP";
    DSKT2.DARAM2     = "L1D_HEAP";
    DSKT2.SARAM0     = "L1D_HEAP";
    DSKT2.SARAM1     = "L1D_HEAP";
    DSKT2.SARAM2     = "L1D_HEAP";
    DSKT2.ESDATA     = "DDR2_HEAP";
    DSKT2.IPROG      = "L1D_HEAP";
    DSKT2.EPROG      = "DDR2_HEAP";
    DSKT2.DSKT2_HEAP = "DDR2_HEAP"; /* for DSKT2 objects */

    /* Create a heap and register it with MessageQ */
    MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
    MessageQ.registerHeapMeta(Program.global.DDR2_HEAP, 0); //?
}
else if (Program.build.target.os == "Linux") {
    osalGlobal.runtimeEnv = osalGlobal.LINUX;

    /* Unfortunately, the user script must bring this module in... */
    xdc.useModule('ti.sdo.xdcruntime.linux.Settings');

    Program.heap = 0x8000;
    var Memory = xdc.useModule('xdc.runtime.Memory');
    Memory.defaultHeapSize = 0x8000;
}
else if (Program.build.target.os == "WindowsCE") {
    osalGlobal.runtimeEnv = osalGlobal.WINCE;

    /* Unfortunately, the user script must bring this module in... */
    xdc.useModule('ti.sdo.xdcruntime.wince.Settings');

    Program.heap = 0x8000;
    var Memory = xdc.useModule('xdc.runtime.Memory');
    Memory.defaultHeapSize = 0x8000;
}
else {
    /* Unsupported OS.  Throw an exception to alert the user. */
    throw ("Unsupported target OS");
}

/*
 *  ======== Engine Configuration ========
 */
var Engine = xdc.useModule('ti.sdo.ce.Engine');
var myEngine = Engine.create("video3_copy", [
    {
        name : "viddec3_copy",
        mod  : decoder,
        local: false
    },
    {
        name : "videnc2_copy",
        mod  : encoder,
        local: false
    }
]);

/*
 * ======== Server Configuration ========
 */
var Server = xdc.useModule('ti.sdo.ce.Server');
Server.threadAttrs.stackSize = 1024 * 64;
Server.threadAttrs.priority = Server.MINPRI;
Server.autoGenScratchSizeArrays = true;

Server.algs = [
    {name: "viddec3_copy", mod: decoder, threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 1}
    },
    {name: "videnc2_copy", mod: encoder, threadAttrs: {
        stackMemId: 0, priority: Server.MINPRI + 1}
    }
];
/*
 *  @(#) ti.sdo.ce.examples.apps.video3_copy; 1, 0, 0,1; 2-24-2012 19:28:29; /db/atree/library/trees/ce/ce-t06/src/ xlibrary

 */

